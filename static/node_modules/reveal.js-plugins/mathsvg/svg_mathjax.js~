var RevealSVGMath = (function(){

    // apply a function to elements of an array x
    function forEach(x,f) { 
        var n = x.length; for (var i = 0; i < n; ++i) { f(x[i]); } 
    }

    function cleanup(mathbucket) {
            // remove the temporary items
            mathbucket.parentNode.removeChild(mathbucket);
    }

    function replaceText(svgdest,mathjaxdiv) {
	var options = {};
        options.scale = 0.0016;
        options.escape_clip = false;
                var svgmath = 
                     mathjaxdiv.getElementsByClassName('MathJax_SVG')[0]
                               .getElementsByTagName('svg')[0];
                var svgmathinfo = {
                  width: svgmath.viewBox.baseVal.width, 
                  height: svgmath.viewBox.baseVal.height
                };
                // get graphics nodes
                var gnodes = 
                    svgmath.getElementsByTagName('g')[0].cloneNode(true);
                var fontsize = svgdest.getAttribute('font-size');
                var scale = options.scale*fontsize;
                var x =  +svgdest.getAttribute('x');
                var y =  +svgdest.getAttribute('y');

                var x0 = x;
                var y0 = y;
                var x1 = -svgmathinfo.width * 0.5;
                var y1 = svgmathinfo.height*0;
                gnodes.setAttribute('transform', 'translate('+x0+' '+y0+')'
                     +' scale('+scale+') translate('+x1+' '+y1+')'
                     +' matrix(1 0 0 -1 0 0)');
                if (options.escape_clip)
                    svgdest.parentNode.removeAttribute('clip-path');
                svgdest.parentNode.replaceChild(gnodes,svgdest);

    }

    function svgmath() {
	MathJax.Hub.Config({
			messageStyle: 'none',
			tex2jax: {
				inlineMath: [['$','$'],['\\(','\\)']] ,
				skipTags: ['script','noscript','style','textarea','pre']
			},
			skipStartupTypeset: true
		});
//alert("svgmath");
            var mathbucket = document.createElement('div');
            mathbucket.setAttribute('id','mathjax_svg_bucket');
            document.body.appendChild(mathbucket);

            forEach(document.getElementsByTagName('svg'), function(svg) {
             forEach(svg.getElementsByTagName('text'), function(text) {
	        var regexp = /^\s*([LlRrCc]?)(\\\(.*\\\)|\$.*\$)\s*$/;
                var math = text.textContent.match(regexp);
                if ( math )
                {
	                var div = document.createElement('div');
	                mathbucket.appendChild(div);
	                var mathmarkup = math[2].replace(/^\$(.*)\$$/,'\\($1\\)');
	                div.appendChild(document.createTextNode(mathmarkup));
//alert("DIV:" + div.outerHTML);
			MathJax.Hub.Queue(["Typeset",MathJax.Hub,div]);
			MathJax.Hub.Queue( [replaceText, text, div ] );
                }
             });
            });
	    MathJax.Hub.Queue( [cleanup, mathbucket] );

    }

	Reveal.addEventListener( 'ready', function( event ) {
//alert("WAIT");
console.log("READY");
		    svgmath();
	} );

    

})();
